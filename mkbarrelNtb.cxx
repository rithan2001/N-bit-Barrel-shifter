/*
 * Generated by Bluespec Compiler (build 9f4a447)
 * 
 * On Tue Jun 16 12:18:14 IST 2020
 * 
 */
#include "bluesim_primitives.h"
#include "mkbarrelNtb.h"


/* String declarations */
static std::string const __str_literal_2("\n Arithmetic barrel right shifter= %d ", 38u);
static std::string const __str_literal_1("logical barrel right shifter= %d ", 33u);


/* Constructor */
MOD_mkbarrelNtb::MOD_mkbarrelNtb(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_state(simHdl, "state", this, 32u, 0u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 4u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkbarrelNtb::init_symbols_0()
{
  init_symbol(&symbols[0u], "CAN_FIRE_RL_go", SYM_DEF, &DEF_CAN_FIRE_RL_go, 1u);
  init_symbol(&symbols[1u], "RL_go", SYM_RULE);
  init_symbol(&symbols[2u], "state", SYM_MODULE, &INST_state);
  init_symbol(&symbols[3u], "WILL_FIRE_RL_go", SYM_DEF, &DEF_WILL_FIRE_RL_go, 1u);
}


/* Rule actions */

void MOD_mkbarrelNtb::RL_go()
{
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    dollar_display(sim_hdl, this, "s,32", &__str_literal_1, 5u);
    dollar_display(sim_hdl, this, "s,32", &__str_literal_2, 5u);
    dollar_finish(sim_hdl, "32", 1u);
  }
  INST_state.METH_write(1u);
}


/* Methods */


/* Reset routines */

void MOD_mkbarrelNtb::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_state.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkbarrelNtb::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkbarrelNtb::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_state.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkbarrelNtb::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 4u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_go", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_go", 1u);
  num = INST_state.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkbarrelNtb::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkbarrelNtb &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkbarrelNtb::vcd_defs(tVCDDumpType dt, MOD_mkbarrelNtb &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_CAN_FIRE_RL_go) != DEF_CAN_FIRE_RL_go)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_go, 1u);
	backing.DEF_CAN_FIRE_RL_go = DEF_CAN_FIRE_RL_go;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_go) != DEF_WILL_FIRE_RL_go)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_go, 1u);
	backing.DEF_WILL_FIRE_RL_go = DEF_WILL_FIRE_RL_go;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_go, 1u);
      backing.DEF_CAN_FIRE_RL_go = DEF_CAN_FIRE_RL_go;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_go, 1u);
      backing.DEF_WILL_FIRE_RL_go = DEF_WILL_FIRE_RL_go;
    }
}

void MOD_mkbarrelNtb::vcd_prims(tVCDDumpType dt, MOD_mkbarrelNtb &backing)
{
  INST_state.dump_VCD(dt, backing.INST_state);
}
